#!/usr/bin/env ruby

$rule = 110

$width = 20
$char = "\u{FF03}"
$sep = "\u{3000}"

$plain = false
$bail = false

def help
	bold = "\e[4m"
	not_bold = "\e[24m"
	puts "Usage: #{$0} -r #{bold}rule#{not_bold} -w #{bold}width#{not_bold} [-p]"
	puts "-r, --rule\tThe rule to use to generate the automata"
	puts "-w, --width\tThe width of the output (much of the right side may be blank with certain rules)"
	puts "-p, --plain\tDon't use ANSI escape codes in the output"
	exit
end

help if ARGV.empty?
until ARGV.empty?
	opt = ARGV.shift
	case opt
	when "-h", "--help"
		help
	when "-r", "--rule"
		$rule = ARGV.shift.to_i
		if $rule < 0 || $rule > 255
			puts "The rule must be between 0 and 255"
			exit
		end 
	when "-w", "--width"
		$width = ARGV.shift.to_i
		if $width % 2 == 0
			puts "Width must be odd"
			exit
		end
	when "-p", "--plain"
		$plain = true
	else
		puts "Unrecognized option: #{opt}"
		$bail = true
	end
end

exit if $bail

HEIGHT = $width / 2 + 1
TABLE = [*0..7].map { |n| sprintf("%03b", n).chars.map(&:to_i) }.zip(sprintf("%08b", $rule).chars.map(&:to_i).reverse).to_h

def print_row(row)
	puts ($plain ? "" : "\e[1m") + row[$width - 1, $width].map { |n| n == 0 ? $sep : $char }.join("") + ($plain ? "" : "\e[0m")
end

extra_width = $width * 3 - 2

current_row = [0] * (extra_width / 2) + [1] + [0] * (extra_width / 2)
print_row(current_row)

(HEIGHT - 1).times do |x|
	current_row = [*0...extra_width].map do |y|
		first = (y == 0 ? 0 : current_row[y - 1])
		last = (y + 1 == extra_width ? 0 : current_row[y + 1])
		prev_values = [first, current_row[y], last]
		TABLE[prev_values]
	end
	print_row(current_row)
end

